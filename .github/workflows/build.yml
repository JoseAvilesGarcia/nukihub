name: NukiHub
on:
  push:
    branches: ["*"]
    tags: ["*"]
  pull_request:
    branches: ["*"]
    tags: ["*"]

  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.board }} (${{ matrix.build }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        board: [esp32dev, esp32-s3, esp32-c3, esp32solo1]
        build: [release, debug]
    env:
      BOARD: ${{ matrix.board }}
      VARIANT: ${{ matrix.name || matrix.board }}
      BUILD: ${{ matrix.build }}
    steps:
      - name: Fix variant name
        run: |
          # remove dash character
          export VARIANT=${VARIANT//-/}

          if [ "$VARIANT" = "esp32dev" ]; then
            VARIANT="esp32"
          fi

          echo "VARIANT=${VARIANT}" | tee -a ${GITHUB_ENV}
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.platformio/.cache
          key: ${{ runner.os }}-pio
      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install PlatformIO Core
        run: pip install --upgrade platformio
      - name: Install ESPTool
        run: pip install --upgrade esptool
      - name: Add version info
        env:
          Version: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
        run: |
          sed -i "s/unknownbuildnr/$Version (${BUILD})/g" src/Config.h
      - name: Build ${{ matrix.build }} PlatformIO Project ${{ matrix.board }}
        run: |
          if [ "$BUILD" = "debug" ]; then
            BOARD="${BOARD}_dbg"
          fi
          echo "::group::Building with PlatformIO"
            pio run --environment ${BOARD}
          echo "::endgroup::"
          mkdir -p ${BUILD}/${VARIANT}
          cp -v .pio/build/${BOARD}/firmware.bin ${BUILD}/${VARIANT}/nuki_hub_${VARIANT}.bin
          cp -v .pio/build/${BOARD}/partitions.bin ${BUILD}/${VARIANT}/nuki_hub.partitions.bin
          cp -v .pio/build/${BOARD}/bootloader.bin ${BUILD}/${VARIANT}/bootloader.bin
          if [ "$BUILD" = "debug" ]; then
            cp -v .pio/build/${BOARD}/firmware.elf ${BUILD}/${VARIANT}/nuki_hub_${VARIANT}.elf
          fi
          cp -v bin/boot_app0.bin ${BUILD}/${VARIANT}/boot_app0.bin
          cp -v how-to-flash.txt ${BUILD}/${VARIANT}/how-to-flash.txt

          cat << EOF | tee ${BUILD}/${VARIANT}/flash.sh
          esptool.py --chip esp32 merge_bin -o ${BUILD}/${VARIANT}/webflash_nuki_hub_${VARIANT}.bin --flash_mode dio --flash_freq keep --flash_size keep 0xe000 bin/boot_app0.bin 0x1000 ${BUILD}/${VARIANT}/bootloader.bin 0x10000 ${BUILD}/${VARIANT}/nuki_hub_${VARIANT}.bin 0x8000 ${BUILD}/${VARIANT}/nuki_hub.partitions.bin
          EOF
          chmod a+x ${BUILD}/${VARIANT}/flash.sh

      - name: Upload Artifact ${{ matrix.board }}-${{ matrix.build }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('{0}-{1}-assets', env.VARIANT, matrix.build) }}
          path: ${{ matrix.build }}/${{ env.VARIANT }}

      # ----

            # echo "esptool.py --chip esp32 --port /dev/ttyUSB0 --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq keep --flash_size detect 0xe000 boot_app0.bin 0x1000 bootloader.bin 0x10000 nuki_hub_esp32.bin 0x8000 nuki_hub.partitions.bin" > debug/esp32dev/flash.sh

  release:
    name: Release new version
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}    
      - name: Download esp32dev
        uses: actions/download-artifact@v4
        with:
          name: esp32-assets
          path: release/esp32dev
      - name: Download esp32-s3
        uses: actions/download-artifact@v4
        with:
          name: esp32-s3-assets
          path: release/esp32s3
      - name: Download esp32-c3
        uses: actions/download-artifact@v4
        with:
          name: esp32-c3-assets
          path: release/esp32c3
      - name: Download esp32solo1
        uses: actions/download-artifact@v4
        with:
          name: esp32solo1-assets
          path: release/esp32solo1
      - name: Download esp32dev-debug
        uses: actions/download-artifact@v4
        with:
          name: esp32-debug-assets
          path: debug/esp32dev
      - name: Download esp32-s3-debug
        uses: actions/download-artifact@v4
        with:
          name: esp32-s3-debug-assets
          path: debug/esp32s3
      - name: Download esp32-c3-debug
        uses: actions/download-artifact@v4
        with:
          name: esp32-c3-debug-assets
          path: debug/esp32c3
      - name: Download esp32solo1-debug
        uses: actions/download-artifact@v4
        with:
          name: esp32solo1-debug-assets
          path: debug/esp32solo1
      - name: Get the version
        id: get_version
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      - name: Build the zip archive for ESP32
        run: |
          cd release/esp32dev
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32.zip * -x "webflash_nuki_hub_esp32.bin"
      - name: Build the zip archive for ESP32-S3
        run: |
          cd release/esp32s3
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-S3.zip * -x "webflash_nuki_hub_esp32s3.bin"
      - name: Build the zip archive for ESP32-C3
        run: |
          cd release/esp32c3
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-C3.zip * -x "webflash_nuki_hub_esp32c3.bin"
      - name: Build the zip archive for ESP32-SOLO1
        run: |
          cd release/esp32solo1
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-SOLO1.zip * 
      - name: Build the zip archive for ESP32 Debug
        run: |
          cd debug/esp32dev
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-DEBUG.zip *
      - name: Build the zip archive for ESP32-S3 Debug
        run: |
          cd debug/esp32s3
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-S3-DEBUG.zip *
      - name: Build the zip archive for ESP32-C3 Debug
        run: |
          cd debug/esp32c3
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-C3-DEBUG.zip *
      - name: Build the zip archive for ESP32-SOLO1 Debug
        run: |
          cd debug/esp32solo1
          zip -9r ../../NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-SOLO1-DEBUG.zip *          
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          allowUpdates: true
          updateOnlyUnreleased: true
          draft: true
          name: "Nuki Hub ${{ steps.get_version.outputs.VERSION }}"
          artifacts: "NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-S3.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-C3.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-SOLO1.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-DEBUG.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-S3-DEBUG.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-C3-DEBUG.zip,NukiHub-${{ steps.get_version.outputs.VERSION }}-ESP32-SOLO1-DEBUG.zip"
          artifactContentType: application/zip
      - name: Copy binaries to ota and webflash
        run: |
          cp release/esp32dev/nuki_hub_esp32.bin ota/nuki_hub_esp32.bin
          cp release/esp32s3/nuki_hub_esp32s3.bin ota/nuki_hub_esp32s3.bin
          cp release/esp32c3/nuki_hub_esp32c3.bin ota/nuki_hub_esp32c3.bin
          cp release/esp32solo1/nuki_hub_esp32solo1.bin ota/nuki_hub_esp32solo1.bin
          cp release/esp32dev/webflash_nuki_hub_esp32.bin webflash/webflash_nuki_hub_esp32.bin
          cp release/esp32s3/webflash_nuki_hub_esp32s3.bin webflash/webflash_nuki_hub_esp32s3.bin
          cp release/esp32c3/webflash_nuki_hub_esp32c3.bin webflash/webflash_nuki_hub_esp32c3.bin
          rm -rf release
          rm -rf debug
          rm -rf NukiHub-*.zip
      - name: Commit binaries to master
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update binaries for version ${{ steps.get_version.outputs.VERSION }}"
          file_pattern: 'ota/*.bin webflash/*.bin'
          branch: master
